TRIGGERS
	* eqDamaged
		*  Purpose		:	Capture the name of the damaged equipment
		*  Matches on	:	"^\((.*?) gets damaged\)$"
		*  Group to		: 	Ungrouped
		*  Func Calls	:	update_damaged_eq
		*  Passes		:	(1)  The name of this trigger :  eqDamaged
							(2)  The name of the item that got damaged as the captured wildcard
	* eqRepair
		*  Purpose		:	Capture the name of the equipment that needs to be repaired
		*  Matches on	:	"^.* charges you (.*?) gold piece.* to repair (.*?)\.$"
		*  Group to		: 	Ungrouped
		*  Func Calls	:	update_damaged_eq
		*  Passes		:	(1)  The name of this trigger :  eqRepair
							(2)  The name of the item that got repaired as the captured wildcard	
	* eqRepairNeeded
		*  Purpose		:	Capture the name of the item that needs to be repaired
		*  Matches on	:	"^.* tells you, 'It will cost (.*?) piece.* of gold to repair (.*?)\.\.\.'$"
		*  Group to		: 	Ungrouped
		*  Func Calls	:	update_damaged_eq
		*  Passes		:	(1)  The name of this trigger :  eqRepairNeeded
							(2)  The name of the item that needs to be repaired as the captured wildcard
	* eqScrap
		*  Purpose		:	Note the name of the item that was just destroyed!
		*  Matches on	:	"^(.*) falls to the ground in scraps\!$"
		*  Group to		: 	Ungrouped
		*  Func Calls	:	update_damaged_eq
		*  Passes		:	(1)  The name of this trigger :  eqScrap
							(2)  The name of the item that was destroyed(!) as the captured wildcard	
	* disableEqScanTriggers
		*  Purpose		:	Signifies the end of the equipment list capture
		*  Matches on	:	"^\(type \'garb\' for a list of all wear locations\)$"
		*  Group to		: 	Ungrouped
		*  Func Calls	:	update_damaged_eq
		*  Passes		:	(1)  The name of this trigger :  disableEqScanTriggers
	* light
	* finger
	* neck
	* body
	* head
	* legs
	* feet
	* hands
	* arms
	* shield
	* about_body
	* waist
	* wrist
	* wield
	* dual_wield
	* ears
	* eyes
	* held
	* missile_wielded
	* back
	* face
	* ankle
	* lance
	* init
	* config

ALIASES
	* resizeUI
	* doEqScan
	* clearEqVariables
	* setEqMaxAc
	* clearConsole
	* toggleEqAutoScan
	* toggleConsole
	* toggleWarnings
	* toggleNewbie
	* help

GLOBAL VARIABLES
	* using_msdp
	* MSDP
	* msdp
	* using_msp
	* MSP
	* background_win
	* top_panel
	* logo_win
	* top_right_panel
	* left_panel
	* info_panel
	* bottom_panel
	* health_win
	* mana_win
	* movement_win
	* xp_win
	* opponent_win
	* score_win
	* affect_win
	* area_win
	* eq_win
	* minimap_win
	* console_win
	* score_button
	* affect_button
	* area_button
	* repair_button
	* cancel_button
	* screen_width
	* screen_height
	* bar_width
	* bar_height
	* top_panel_height
	* left_panel_width
	* right_panel_width
	* bottom_panel_height
	* logo_width
	* opponent_width
	* min_width
	* min_height
	* version_ok
	* timer_warning
	* timer_critical
	* affects
	* RoomExit
	* RoomType
	* ExitCount
	* console_log
	* affect_scroll
	* affect_scroll_bottom_max
	* area_scroll
	* area_scroll_bottom_max
	* repair_scroll
	* repair_scroll_bottom_max
	* is_loaded
	* area_list
	* filter_text
	* load_once
	* START_ROOM
	* EQ_AUTO_AC
	* item_nodes
	* eq
	* sorted_damaged_eq
	* scanned
	* repair_total
	* repair_needed
	* cancel_showing
	* alt_affects_view
	* area_modifier
	* level
	* areas_loaded
	* info_windows
	* current_window
	* asset_path
	* colourWhite
	* colourGreen
	* colourGold
	* colourBlack
	* colourRed
	* colourDarkGray
	* colourOrange
	* fixed_width
	* fixed_width_fb
	* bar_font
	* bar_font_fb
	* default_font
	* default_font_fb
	* i_affects
	* spelldowns

TIMERS
	* A single one shot timer to prevent a freeze during the initial load.

FUNCTIONS
	* OnPluginWorldOutputResized()
	* OnPluginDisconnect()
	* OnPluginInstall()
	* OnPluginConnect()
	* OnPluginTelnetRequest(type, data)
	* OnPluginTelnetSubnegotiation(type, data)
	* draw_panes()
	* do_resize()
	* check_dimensions(width, height)
	* init_script()
	* create_layout()
	* draw_time()
	* format_time(time_var)
	* draw_energy_bars()
	* draw_energy_bar (type, colour, colour2, window, current_value, max_value, width, height, xarg)
	* outlined_text (colour, window, text, size, x, y, centre_width, font)
	* draw_score()
	* format_gold(str)
	* format_stat(str)
	* load_avatar_img(name, class)
	* update_affects(data)
	* draw_affects()
	* draw_affect_line(t_val, y_offset)
	* init_rooms(data)
	* draw_room(x, y, type, in_room)
	* draw_minimap()
	* init_area_list()
	* draw_area_list()
	* print_area_line(alias_name, area_name, y_offset, lrange)
	* goto_area(flags, hotspot_id)
	* hide_cancel()
	* draw_eq_window()
	* draw_repair_totals()
	* mousedown(flags, hotspot_id)
	* mouseup(flags, hotspot_id)
	* mouseover(flags, hotspot_id)
	* cancelmouseover(flags, hotspot_id)
	* scrollwheel(flags, hotspot_id)
	* hide_info_windows()
	* StoreVariable(MSDP_var, MSDP_val)
	* update_damaged_eq(name, _, wildcards)
	* set_eq(name, _, wildcards)
	* delete_eq_vars()
	* set_eq_max_ac(name, _, wildcards)
	* auto_detect_ac(eq_name)
	* toggle_warnings(name, _, wildcards)
	* toggle_newbie(name, _, wildcards)
	* enable_console(name, line, wildcards)
	* update_console()
	* clear_console()
	* append_config()
	* note_dialog(name, line, wildcards)
	* split(str, patt)
	* decapitalize(str)
	* trunc(str, length, repl)
	* strip(str)
	* encode(str)
	* decode(str)
	* copy_table(t)

There are additional binary search functions…

